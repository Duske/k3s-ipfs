---
apiVersion: v1
kind: Secret
metadata:
  name: mysecret
type: Opaque
data:
  accessKey: bWluaW8= #minio
  secretKey: bWluaW8xMjM= #minio123
---
apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: daemon-step-
spec:
  entrypoint: daemon-example
  templates:
  - name: daemon-example
    dag:
      tasks:
      - name: minio
        template: minioS3

      - name: producer1
        dependencies: [minio]
        template: producer
        arguments:
          parameters:
          - name: url
            value: '{{tasks.minio.ip}}'
          - name: myKey
            value: 'foo'

      - name: producer2
        dependencies: [minio]
        template: producer
        arguments:
          parameters:
          - name: url
            value: '{{tasks.minio.ip}}'
          - name: myKey
            value: 'bar'
      
      - name: print
        dependencies: [producer1, producer2]
        template: consumer
        arguments:
          parameters:
            - name: file1
              value: "foo"
            - name: file2
              value: "bar"
          artifacts:
          - name: art1
            from: "{{tasks.producer1.outputs.artifacts.message}}" 
          - name: art2
            from: "{{tasks.producer2.outputs.artifacts.message}}" 

  - name: minioS3
    daemon: true
    container:
      image: minio/minio:latest
      env:
        # Minio access key and secret key
        - name: MINIO_ACCESS_KEY
          value: minio
        - name: MINIO_SECRET_KEY
          value: minio123
      command: [sh, -c]
      args: ['mkdir -p /data/analyze && /usr/bin/minio server /data']

  - name: producer
    container:
      image: alpine:latest
      command: [sh, -c]
      args: ["echo {{inputs.parameters.myKey}} | tee /tmp/{{inputs.parameters.myKey}}.txt"]
    inputs:
      parameters:
        - name: url
        - name: myKey
    outputs:
      artifacts:
      - name: message
        path: /tmp
        archive:
          none: {}
        s3:
          endpoint: "{{inputs.parameters.url}}:9000"
          bucket: analyze
          insecure: true 
          key: "{{inputs.parameters.myKey}}.txt"
          accessKeySecret:
            name: mysecret
            key: accessKey
          secretKeySecret:
            name: mysecret
            key: secretKey
  - name: consumer
    container:
      image: alpine:latest
      command: [sh, -c]
      args: ["cat /tmp/art1/{{inputs.parameters.file1}}.txt && cat /tmp/art2/{{inputs.parameters.file2}}.txt"]
    inputs:
      parameters:
        - name: file1
        - name: file2
      artifacts:
      - name: art1
        path: /tmp/art1
      - name: art2
        path: /tmp/art2